import * as z from "zod";
import { GameMode, ApprovedType, Language, Genre } from "./osu";
export declare const BeatmapSchema: z.ZodEffects<z.ZodObject<{
    approved: z.ZodPipeline<z.ZodNumber, z.ZodNativeEnum<typeof ApprovedType>>;
    submit_date: z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodDate>;
    approved_date: z.ZodNullable<z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodDate>>;
    last_update: z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodDate>;
    artist: z.ZodString;
    artist_unicode: z.ZodString;
    beatmap_id: z.ZodNumber;
    beatmapset_id: z.ZodNumber;
    bpm: z.ZodNumber;
    creator: z.ZodString;
    creator_id: z.ZodNumber;
    difficultyrating: z.ZodNumber;
    diff_aim: z.ZodNumber;
    diff_speed: z.ZodNumber;
    diff_size: z.ZodNumber;
    diff_overall: z.ZodNumber;
    diff_approach: z.ZodNumber;
    diff_drain: z.ZodNumber;
    hit_length: z.ZodNumber;
    source: z.ZodString;
    genre_id: z.ZodPipeline<z.ZodNumber, z.ZodNativeEnum<typeof Genre>>;
    language_id: z.ZodPipeline<z.ZodNumber, z.ZodNativeEnum<typeof Language>>;
    title: z.ZodString;
    title_unicode: z.ZodString;
    total_length: z.ZodNumber;
    version: z.ZodString;
    file_md5: z.ZodString;
    mode: z.ZodPipeline<z.ZodNumber, z.ZodNativeEnum<typeof GameMode>>;
    tags: z.ZodEffects<z.ZodString, string[], string>;
    favourite_count: z.ZodNumber;
    rating: z.ZodNumber;
    playcount: z.ZodNumber;
    passcount: z.ZodNumber;
    count_normal: z.ZodNumber;
    count_slider: z.ZodNumber;
    count_spinner: z.ZodNumber;
    max_combo: z.ZodString;
    storyboard: z.ZodEffects<z.ZodNumber, boolean, number>;
    video: z.ZodEffects<z.ZodNumber, boolean, number>;
    download_unavailable: z.ZodEffects<z.ZodNumber, boolean, number>;
    audio_unavailable: z.ZodEffects<z.ZodNumber, boolean, number>;
}, "strip", z.ZodTypeAny, {
    approved: ApprovedType;
    submit_date: Date;
    approved_date: Date | null;
    last_update: Date;
    artist: string;
    artist_unicode: string;
    beatmap_id: number;
    beatmapset_id: number;
    bpm: number;
    creator: string;
    creator_id: number;
    difficultyrating: number;
    diff_aim: number;
    diff_speed: number;
    diff_size: number;
    diff_overall: number;
    diff_approach: number;
    diff_drain: number;
    hit_length: number;
    source: string;
    genre_id: Genre;
    language_id: Language;
    title: string;
    title_unicode: string;
    total_length: number;
    version: string;
    file_md5: string;
    mode: GameMode;
    tags: string[];
    favourite_count: number;
    rating: number;
    playcount: number;
    passcount: number;
    count_normal: number;
    count_slider: number;
    count_spinner: number;
    max_combo: string;
    storyboard: boolean;
    video: boolean;
    download_unavailable: boolean;
    audio_unavailable: boolean;
}, {
    approved: number;
    submit_date: string;
    approved_date: string | null;
    last_update: string;
    artist: string;
    artist_unicode: string;
    beatmap_id: number;
    beatmapset_id: number;
    bpm: number;
    creator: string;
    creator_id: number;
    difficultyrating: number;
    diff_aim: number;
    diff_speed: number;
    diff_size: number;
    diff_overall: number;
    diff_approach: number;
    diff_drain: number;
    hit_length: number;
    source: string;
    genre_id: number;
    language_id: number;
    title: string;
    title_unicode: string;
    total_length: number;
    version: string;
    file_md5: string;
    mode: number;
    tags: string;
    favourite_count: number;
    rating: number;
    playcount: number;
    passcount: number;
    count_normal: number;
    count_slider: number;
    count_spinner: number;
    max_combo: string;
    storyboard: number;
    video: number;
    download_unavailable: number;
    audio_unavailable: number;
}>, {
    getCoverImageURL: () => string;
    getCoverThumbnailURL: () => string;
    approved: ApprovedType;
    submit_date: Date;
    approved_date: Date | null;
    last_update: Date;
    artist: string;
    artist_unicode: string;
    beatmap_id: number;
    beatmapset_id: number;
    bpm: number;
    creator: string;
    creator_id: number;
    difficultyrating: number;
    diff_aim: number;
    diff_speed: number;
    diff_size: number;
    diff_overall: number;
    diff_approach: number;
    diff_drain: number;
    hit_length: number;
    source: string;
    genre_id: Genre;
    language_id: Language;
    title: string;
    title_unicode: string;
    total_length: number;
    version: string;
    file_md5: string;
    mode: GameMode;
    tags: string[];
    favourite_count: number;
    rating: number;
    playcount: number;
    passcount: number;
    count_normal: number;
    count_slider: number;
    count_spinner: number;
    max_combo: string;
    storyboard: boolean;
    video: boolean;
    download_unavailable: boolean;
    audio_unavailable: boolean;
}, {
    approved: number;
    submit_date: string;
    approved_date: string | null;
    last_update: string;
    artist: string;
    artist_unicode: string;
    beatmap_id: number;
    beatmapset_id: number;
    bpm: number;
    creator: string;
    creator_id: number;
    difficultyrating: number;
    diff_aim: number;
    diff_speed: number;
    diff_size: number;
    diff_overall: number;
    diff_approach: number;
    diff_drain: number;
    hit_length: number;
    source: string;
    genre_id: number;
    language_id: number;
    title: string;
    title_unicode: string;
    total_length: number;
    version: string;
    file_md5: string;
    mode: number;
    tags: string;
    favourite_count: number;
    rating: number;
    playcount: number;
    passcount: number;
    count_normal: number;
    count_slider: number;
    count_spinner: number;
    max_combo: string;
    storyboard: number;
    video: number;
    download_unavailable: number;
    audio_unavailable: number;
}>;
declare const getBeatmapParamsInterface: z.ZodObject<{
    beatmapId: z.ZodOptional<z.ZodNumber>;
    beatmapSetId: z.ZodOptional<z.ZodNumber>;
    user: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    mode: z.ZodOptional<z.ZodNativeEnum<typeof GameMode>>;
    converted: z.ZodOptional<z.ZodBoolean>;
    hash: z.ZodOptional<z.ZodString>;
    limit: z.ZodOptional<z.ZodNumber>;
    mods: z.ZodOptional<z.ZodNumber>;
    since: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    mode?: GameMode | undefined;
    beatmapId?: number | undefined;
    beatmapSetId?: number | undefined;
    user?: string | number | undefined;
    converted?: boolean | undefined;
    hash?: string | undefined;
    limit?: number | undefined;
    mods?: number | undefined;
    since?: string | undefined;
}, {
    mode?: GameMode | undefined;
    beatmapId?: number | undefined;
    beatmapSetId?: number | undefined;
    user?: string | number | undefined;
    converted?: boolean | undefined;
    hash?: string | undefined;
    limit?: number | undefined;
    mods?: number | undefined;
    since?: string | undefined;
}>;
export declare const getBeatmapParamsSchema: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodObject<{
    beatmapId: z.ZodOptional<z.ZodNumber>;
    beatmapSetId: z.ZodOptional<z.ZodNumber>;
    user: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    mode: z.ZodOptional<z.ZodNativeEnum<typeof GameMode>>;
    converted: z.ZodOptional<z.ZodBoolean>;
    hash: z.ZodOptional<z.ZodString>;
    limit: z.ZodOptional<z.ZodNumber>;
    mods: z.ZodOptional<z.ZodNumber>;
    since: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    mode?: GameMode | undefined;
    beatmapId?: number | undefined;
    beatmapSetId?: number | undefined;
    user?: string | number | undefined;
    converted?: boolean | undefined;
    hash?: string | undefined;
    limit?: number | undefined;
    mods?: number | undefined;
    since?: string | undefined;
}, {
    mode?: GameMode | undefined;
    beatmapId?: number | undefined;
    beatmapSetId?: number | undefined;
    user?: string | number | undefined;
    converted?: boolean | undefined;
    hash?: string | undefined;
    limit?: number | undefined;
    mods?: number | undefined;
    since?: string | undefined;
}>>, {
    b: number | undefined;
    s: number | undefined;
    u: string | number | undefined;
    m: GameMode | undefined;
    a: boolean | undefined;
    h: string | undefined;
    limit: number | undefined;
    mods: number | undefined;
    since: string | undefined;
}, {
    mode?: GameMode | undefined;
    beatmapId?: number | undefined;
    beatmapSetId?: number | undefined;
    user?: string | number | undefined;
    converted?: boolean | undefined;
    hash?: string | undefined;
    limit?: number | undefined;
    mods?: number | undefined;
    since?: string | undefined;
} | undefined>, ({
    b: number | undefined;
    s: number | undefined;
    u: string | number | undefined;
    m: GameMode | undefined;
    a: boolean | undefined;
    h: string | undefined;
    limit: number | undefined;
    mods: number | undefined;
    since: string | undefined;
} & {
    type: string;
}) | undefined, {
    mode?: GameMode | undefined;
    beatmapId?: number | undefined;
    beatmapSetId?: number | undefined;
    user?: string | number | undefined;
    converted?: boolean | undefined;
    hash?: string | undefined;
    limit?: number | undefined;
    mods?: number | undefined;
    since?: string | undefined;
} | undefined>;
export type Beatmap = z.infer<typeof BeatmapSchema>;
export type GetBeatmapParams = z.infer<typeof getBeatmapParamsInterface>;
export type GetBeatmapParamsWithoutSpecParams = Omit<GetBeatmapParams, "beatmapId" | "beatmapSetId" | "user" | "since">;
export {};
